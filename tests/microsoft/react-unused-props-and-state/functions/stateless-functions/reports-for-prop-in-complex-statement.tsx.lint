import React = require('react');

interface Props {
    readonly text: string
    readonly highlight: ReadonlyArray<number>
    readonly somethingElse: string
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ [Unused React property defined in interface: somethingElse]
}

export const HighlightText: React.SFC<Props> = (props) => (
    <span>
    {
        props.text
        .split('')
        .map((ch, i): [string, boolean] => [ch, props.highlight.includes(i)])
        .concat([['', false]])
        .reduce(
            (state, [ch, matched], i, arr) => {
            if (matched === state.matched && i < arr.length - 1) {
                state.str += ch
            } else {
                const Component = state.matched ? 'mark' : 'span'
                state.result.push(<Component key={i}>{state.str}</Component>)
                state.str = ch
                state.matched = matched
            }
            return state
            },
            {
            matched: false,
            str: '',
            result: new Array<React.ReactElement<any>>(),
            }
        ).result
    }
    </span>
)
